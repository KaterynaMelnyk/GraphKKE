# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GraphLib_c')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GraphLib_c')
    _GraphLib_c = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GraphLib_c', [dirname(__file__)])
        except ImportError:
            import _GraphLib_c
            return _GraphLib_c
        try:
            _mod = imp.load_module('_GraphLib_c', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GraphLib_c = swig_import_helper()
    del swig_import_helper
else:
    import _GraphLib_c
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GraphLib_c.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _GraphLib_c.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _GraphLib_c.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _GraphLib_c.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _GraphLib_c.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _GraphLib_c.SwigPyIterator_equal(self, x)

    def copy(self):
        return _GraphLib_c.SwigPyIterator_copy(self)

    def next(self):
        return _GraphLib_c.SwigPyIterator_next(self)

    def __next__(self):
        return _GraphLib_c.SwigPyIterator___next__(self)

    def previous(self):
        return _GraphLib_c.SwigPyIterator_previous(self)

    def advance(self, n):
        return _GraphLib_c.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _GraphLib_c.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _GraphLib_c.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _GraphLib_c.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _GraphLib_c.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _GraphLib_c.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _GraphLib_c.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GraphLib_c.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _GraphLib_c.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GraphLib_c.IntVector___nonzero__(self)

    def __bool__(self):
        return _GraphLib_c.IntVector___bool__(self)

    def __len__(self):
        return _GraphLib_c.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _GraphLib_c.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GraphLib_c.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GraphLib_c.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GraphLib_c.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GraphLib_c.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GraphLib_c.IntVector___setitem__(self, *args)

    def pop(self):
        return _GraphLib_c.IntVector_pop(self)

    def append(self, x):
        return _GraphLib_c.IntVector_append(self, x)

    def empty(self):
        return _GraphLib_c.IntVector_empty(self)

    def size(self):
        return _GraphLib_c.IntVector_size(self)

    def swap(self, v):
        return _GraphLib_c.IntVector_swap(self, v)

    def begin(self):
        return _GraphLib_c.IntVector_begin(self)

    def end(self):
        return _GraphLib_c.IntVector_end(self)

    def rbegin(self):
        return _GraphLib_c.IntVector_rbegin(self)

    def rend(self):
        return _GraphLib_c.IntVector_rend(self)

    def clear(self):
        return _GraphLib_c.IntVector_clear(self)

    def get_allocator(self):
        return _GraphLib_c.IntVector_get_allocator(self)

    def pop_back(self):
        return _GraphLib_c.IntVector_pop_back(self)

    def erase(self, *args):
        return _GraphLib_c.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _GraphLib_c.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _GraphLib_c.IntVector_push_back(self, x)

    def front(self):
        return _GraphLib_c.IntVector_front(self)

    def back(self):
        return _GraphLib_c.IntVector_back(self)

    def assign(self, n, x):
        return _GraphLib_c.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _GraphLib_c.IntVector_resize(self, *args)

    def insert(self, *args):
        return _GraphLib_c.IntVector_insert(self, *args)

    def reserve(self, n):
        return _GraphLib_c.IntVector_reserve(self, n)

    def capacity(self):
        return _GraphLib_c.IntVector_capacity(self)
    __swig_destroy__ = _GraphLib_c.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _GraphLib_c.IntVector_swigregister
IntVector_swigregister(IntVector)

class SizeVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SizeVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SizeVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _GraphLib_c.SizeVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GraphLib_c.SizeVectorVector___nonzero__(self)

    def __bool__(self):
        return _GraphLib_c.SizeVectorVector___bool__(self)

    def __len__(self):
        return _GraphLib_c.SizeVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _GraphLib_c.SizeVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GraphLib_c.SizeVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GraphLib_c.SizeVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GraphLib_c.SizeVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GraphLib_c.SizeVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GraphLib_c.SizeVectorVector___setitem__(self, *args)

    def pop(self):
        return _GraphLib_c.SizeVectorVector_pop(self)

    def append(self, x):
        return _GraphLib_c.SizeVectorVector_append(self, x)

    def empty(self):
        return _GraphLib_c.SizeVectorVector_empty(self)

    def size(self):
        return _GraphLib_c.SizeVectorVector_size(self)

    def swap(self, v):
        return _GraphLib_c.SizeVectorVector_swap(self, v)

    def begin(self):
        return _GraphLib_c.SizeVectorVector_begin(self)

    def end(self):
        return _GraphLib_c.SizeVectorVector_end(self)

    def rbegin(self):
        return _GraphLib_c.SizeVectorVector_rbegin(self)

    def rend(self):
        return _GraphLib_c.SizeVectorVector_rend(self)

    def clear(self):
        return _GraphLib_c.SizeVectorVector_clear(self)

    def get_allocator(self):
        return _GraphLib_c.SizeVectorVector_get_allocator(self)

    def pop_back(self):
        return _GraphLib_c.SizeVectorVector_pop_back(self)

    def erase(self, *args):
        return _GraphLib_c.SizeVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _GraphLib_c.new_SizeVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _GraphLib_c.SizeVectorVector_push_back(self, x)

    def front(self):
        return _GraphLib_c.SizeVectorVector_front(self)

    def back(self):
        return _GraphLib_c.SizeVectorVector_back(self)

    def assign(self, n, x):
        return _GraphLib_c.SizeVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _GraphLib_c.SizeVectorVector_resize(self, *args)

    def insert(self, *args):
        return _GraphLib_c.SizeVectorVector_insert(self, *args)

    def reserve(self, n):
        return _GraphLib_c.SizeVectorVector_reserve(self, n)

    def capacity(self):
        return _GraphLib_c.SizeVectorVector_capacity(self)
    __swig_destroy__ = _GraphLib_c.delete_SizeVectorVector
    __del__ = lambda self: None
SizeVectorVector_swigregister = _GraphLib_c.SizeVectorVector_swigregister
SizeVectorVector_swigregister(SizeVectorVector)

class IntVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _GraphLib_c.IntVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GraphLib_c.IntVectorVector___nonzero__(self)

    def __bool__(self):
        return _GraphLib_c.IntVectorVector___bool__(self)

    def __len__(self):
        return _GraphLib_c.IntVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _GraphLib_c.IntVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GraphLib_c.IntVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GraphLib_c.IntVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GraphLib_c.IntVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GraphLib_c.IntVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GraphLib_c.IntVectorVector___setitem__(self, *args)

    def pop(self):
        return _GraphLib_c.IntVectorVector_pop(self)

    def append(self, x):
        return _GraphLib_c.IntVectorVector_append(self, x)

    def empty(self):
        return _GraphLib_c.IntVectorVector_empty(self)

    def size(self):
        return _GraphLib_c.IntVectorVector_size(self)

    def swap(self, v):
        return _GraphLib_c.IntVectorVector_swap(self, v)

    def begin(self):
        return _GraphLib_c.IntVectorVector_begin(self)

    def end(self):
        return _GraphLib_c.IntVectorVector_end(self)

    def rbegin(self):
        return _GraphLib_c.IntVectorVector_rbegin(self)

    def rend(self):
        return _GraphLib_c.IntVectorVector_rend(self)

    def clear(self):
        return _GraphLib_c.IntVectorVector_clear(self)

    def get_allocator(self):
        return _GraphLib_c.IntVectorVector_get_allocator(self)

    def pop_back(self):
        return _GraphLib_c.IntVectorVector_pop_back(self)

    def erase(self, *args):
        return _GraphLib_c.IntVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _GraphLib_c.new_IntVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _GraphLib_c.IntVectorVector_push_back(self, x)

    def front(self):
        return _GraphLib_c.IntVectorVector_front(self)

    def back(self):
        return _GraphLib_c.IntVectorVector_back(self)

    def assign(self, n, x):
        return _GraphLib_c.IntVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _GraphLib_c.IntVectorVector_resize(self, *args)

    def insert(self, *args):
        return _GraphLib_c.IntVectorVector_insert(self, *args)

    def reserve(self, n):
        return _GraphLib_c.IntVectorVector_reserve(self, n)

    def capacity(self):
        return _GraphLib_c.IntVectorVector_capacity(self)
    __swig_destroy__ = _GraphLib_c.delete_IntVectorVector
    __del__ = lambda self: None
IntVectorVector_swigregister = _GraphLib_c.IntVectorVector_swigregister
IntVectorVector_swigregister(IntVectorVector)

class SizePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SizePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SizePair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _GraphLib_c.new_SizePair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _GraphLib_c.SizePair_first_set
    __swig_getmethods__["first"] = _GraphLib_c.SizePair_first_get
    if _newclass:
        first = _swig_property(_GraphLib_c.SizePair_first_get, _GraphLib_c.SizePair_first_set)
    __swig_setmethods__["second"] = _GraphLib_c.SizePair_second_set
    __swig_getmethods__["second"] = _GraphLib_c.SizePair_second_get
    if _newclass:
        second = _swig_property(_GraphLib_c.SizePair_second_get, _GraphLib_c.SizePair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _GraphLib_c.delete_SizePair
    __del__ = lambda self: None
SizePair_swigregister = _GraphLib_c.SizePair_swigregister
SizePair_swigregister(SizePair)

class SizeVectorPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SizeVectorPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SizeVectorPair, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _GraphLib_c.SizeVectorPair_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GraphLib_c.SizeVectorPair___nonzero__(self)

    def __bool__(self):
        return _GraphLib_c.SizeVectorPair___bool__(self)

    def __len__(self):
        return _GraphLib_c.SizeVectorPair___len__(self)

    def __getslice__(self, i, j):
        return _GraphLib_c.SizeVectorPair___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GraphLib_c.SizeVectorPair___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GraphLib_c.SizeVectorPair___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GraphLib_c.SizeVectorPair___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GraphLib_c.SizeVectorPair___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GraphLib_c.SizeVectorPair___setitem__(self, *args)

    def pop(self):
        return _GraphLib_c.SizeVectorPair_pop(self)

    def append(self, x):
        return _GraphLib_c.SizeVectorPair_append(self, x)

    def empty(self):
        return _GraphLib_c.SizeVectorPair_empty(self)

    def size(self):
        return _GraphLib_c.SizeVectorPair_size(self)

    def swap(self, v):
        return _GraphLib_c.SizeVectorPair_swap(self, v)

    def begin(self):
        return _GraphLib_c.SizeVectorPair_begin(self)

    def end(self):
        return _GraphLib_c.SizeVectorPair_end(self)

    def rbegin(self):
        return _GraphLib_c.SizeVectorPair_rbegin(self)

    def rend(self):
        return _GraphLib_c.SizeVectorPair_rend(self)

    def clear(self):
        return _GraphLib_c.SizeVectorPair_clear(self)

    def get_allocator(self):
        return _GraphLib_c.SizeVectorPair_get_allocator(self)

    def pop_back(self):
        return _GraphLib_c.SizeVectorPair_pop_back(self)

    def erase(self, *args):
        return _GraphLib_c.SizeVectorPair_erase(self, *args)

    def __init__(self, *args):
        this = _GraphLib_c.new_SizeVectorPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _GraphLib_c.SizeVectorPair_push_back(self, x)

    def front(self):
        return _GraphLib_c.SizeVectorPair_front(self)

    def back(self):
        return _GraphLib_c.SizeVectorPair_back(self)

    def assign(self, n, x):
        return _GraphLib_c.SizeVectorPair_assign(self, n, x)

    def resize(self, *args):
        return _GraphLib_c.SizeVectorPair_resize(self, *args)

    def insert(self, *args):
        return _GraphLib_c.SizeVectorPair_insert(self, *args)

    def reserve(self, n):
        return _GraphLib_c.SizeVectorPair_reserve(self, n)

    def capacity(self):
        return _GraphLib_c.SizeVectorPair_capacity(self)
    __swig_destroy__ = _GraphLib_c.delete_SizeVectorPair
    __del__ = lambda self: None
SizeVectorPair_swigregister = _GraphLib_c.SizeVectorPair_swigregister
SizeVectorPair_swigregister(SizeVectorPair)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _GraphLib_c.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GraphLib_c.StringVector___nonzero__(self)

    def __bool__(self):
        return _GraphLib_c.StringVector___bool__(self)

    def __len__(self):
        return _GraphLib_c.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _GraphLib_c.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GraphLib_c.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GraphLib_c.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GraphLib_c.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GraphLib_c.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GraphLib_c.StringVector___setitem__(self, *args)

    def pop(self):
        return _GraphLib_c.StringVector_pop(self)

    def append(self, x):
        return _GraphLib_c.StringVector_append(self, x)

    def empty(self):
        return _GraphLib_c.StringVector_empty(self)

    def size(self):
        return _GraphLib_c.StringVector_size(self)

    def swap(self, v):
        return _GraphLib_c.StringVector_swap(self, v)

    def begin(self):
        return _GraphLib_c.StringVector_begin(self)

    def end(self):
        return _GraphLib_c.StringVector_end(self)

    def rbegin(self):
        return _GraphLib_c.StringVector_rbegin(self)

    def rend(self):
        return _GraphLib_c.StringVector_rend(self)

    def clear(self):
        return _GraphLib_c.StringVector_clear(self)

    def get_allocator(self):
        return _GraphLib_c.StringVector_get_allocator(self)

    def pop_back(self):
        return _GraphLib_c.StringVector_pop_back(self)

    def erase(self, *args):
        return _GraphLib_c.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _GraphLib_c.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _GraphLib_c.StringVector_push_back(self, x)

    def front(self):
        return _GraphLib_c.StringVector_front(self)

    def back(self):
        return _GraphLib_c.StringVector_back(self)

    def assign(self, n, x):
        return _GraphLib_c.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _GraphLib_c.StringVector_resize(self, *args)

    def insert(self, *args):
        return _GraphLib_c.StringVector_insert(self, *args)

    def reserve(self, n):
        return _GraphLib_c.StringVector_reserve(self, n)

    def capacity(self):
        return _GraphLib_c.StringVector_capacity(self)
    __swig_destroy__ = _GraphLib_c.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _GraphLib_c.StringVector_swigregister
StringVector_swigregister(StringVector)

class GraphiiVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphiiVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GraphiiVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _GraphLib_c.GraphiiVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GraphLib_c.GraphiiVector___nonzero__(self)

    def __bool__(self):
        return _GraphLib_c.GraphiiVector___bool__(self)

    def __len__(self):
        return _GraphLib_c.GraphiiVector___len__(self)

    def __getslice__(self, i, j):
        return _GraphLib_c.GraphiiVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GraphLib_c.GraphiiVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GraphLib_c.GraphiiVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GraphLib_c.GraphiiVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GraphLib_c.GraphiiVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GraphLib_c.GraphiiVector___setitem__(self, *args)

    def pop(self):
        return _GraphLib_c.GraphiiVector_pop(self)

    def append(self, x):
        return _GraphLib_c.GraphiiVector_append(self, x)

    def empty(self):
        return _GraphLib_c.GraphiiVector_empty(self)

    def size(self):
        return _GraphLib_c.GraphiiVector_size(self)

    def swap(self, v):
        return _GraphLib_c.GraphiiVector_swap(self, v)

    def begin(self):
        return _GraphLib_c.GraphiiVector_begin(self)

    def end(self):
        return _GraphLib_c.GraphiiVector_end(self)

    def rbegin(self):
        return _GraphLib_c.GraphiiVector_rbegin(self)

    def rend(self):
        return _GraphLib_c.GraphiiVector_rend(self)

    def clear(self):
        return _GraphLib_c.GraphiiVector_clear(self)

    def get_allocator(self):
        return _GraphLib_c.GraphiiVector_get_allocator(self)

    def pop_back(self):
        return _GraphLib_c.GraphiiVector_pop_back(self)

    def erase(self, *args):
        return _GraphLib_c.GraphiiVector_erase(self, *args)

    def __init__(self, *args):
        this = _GraphLib_c.new_GraphiiVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _GraphLib_c.GraphiiVector_push_back(self, x)

    def front(self):
        return _GraphLib_c.GraphiiVector_front(self)

    def back(self):
        return _GraphLib_c.GraphiiVector_back(self)

    def assign(self, n, x):
        return _GraphLib_c.GraphiiVector_assign(self, n, x)

    def resize(self, *args):
        return _GraphLib_c.GraphiiVector_resize(self, *args)

    def insert(self, *args):
        return _GraphLib_c.GraphiiVector_insert(self, *args)

    def reserve(self, n):
        return _GraphLib_c.GraphiiVector_reserve(self, n)

    def capacity(self):
        return _GraphLib_c.GraphiiVector_capacity(self)
    __swig_destroy__ = _GraphLib_c.delete_GraphiiVector
    __del__ = lambda self: None
GraphiiVector_swigregister = _GraphLib_c.GraphiiVector_swigregister
GraphiiVector_swigregister(GraphiiVector)

class Graphii(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Graphii, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Graphii, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _GraphLib_c.new_Graphii(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddEdge(self, sourceNodeINdex, destNodeIndex):
        return _GraphLib_c.Graphii_AddEdge(self, sourceNodeINdex, destNodeIndex)

    def AddNodeLabels(self, vectorOfNodeLabels):
        return _GraphLib_c.Graphii_AddNodeLabels(self, vectorOfNodeLabels)

    def AddEdgeWeight(self, pairOfNodes, weight):
        return _GraphLib_c.Graphii_AddEdgeWeight(self, pairOfNodes, weight)

    def GetNumberOfNodes(self):
        return _GraphLib_c.Graphii_GetNumberOfNodes(self)

    def GetAdjMatrix(self):
        return _GraphLib_c.Graphii_GetAdjMatrix(self)

    def GetNodeNeighbors(self, indexOfNode):
        return _GraphLib_c.Graphii_GetNodeNeighbors(self, indexOfNode)

    def GetNodeLabels(self):
        return _GraphLib_c.Graphii_GetNodeLabels(self)

    def GetEdgeWeight(self, indexOfNode1, indexOfNode2):
        return _GraphLib_c.Graphii_GetEdgeWeight(self, indexOfNode1, indexOfNode2)

    def GetVectorOfEdges(self):
        return _GraphLib_c.Graphii_GetVectorOfEdges(self)
    __swig_destroy__ = _GraphLib_c.delete_Graphii
    __del__ = lambda self: None
Graphii_swigregister = _GraphLib_c.Graphii_swigregister
Graphii_swigregister(Graphii)

class Graphstst(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Graphstst, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Graphstst, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _GraphLib_c.new_Graphstst(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddEdge(self, sourceNodeINdex, destNodeIndex):
        return _GraphLib_c.Graphstst_AddEdge(self, sourceNodeINdex, destNodeIndex)

    def AddNodeLabels(self, vectorOfNodeLabels):
        return _GraphLib_c.Graphstst_AddNodeLabels(self, vectorOfNodeLabels)

    def AddEdgeWeight(self, pairOfNodes, weight):
        return _GraphLib_c.Graphstst_AddEdgeWeight(self, pairOfNodes, weight)

    def GetNumberOfNodes(self):
        return _GraphLib_c.Graphstst_GetNumberOfNodes(self)

    def GetAdjMatrix(self):
        return _GraphLib_c.Graphstst_GetAdjMatrix(self)

    def GetNodeNeighbors(self, indexOfNode):
        return _GraphLib_c.Graphstst_GetNodeNeighbors(self, indexOfNode)

    def GetNodeLabels(self):
        return _GraphLib_c.Graphstst_GetNodeLabels(self)

    def GetEdgeWeight(self, indexOfNode1, indexOfNode2):
        return _GraphLib_c.Graphstst_GetEdgeWeight(self, indexOfNode1, indexOfNode2)

    def GetVectorOfEdges(self):
        return _GraphLib_c.Graphstst_GetVectorOfEdges(self)
    __swig_destroy__ = _GraphLib_c.delete_Graphstst
    __del__ = lambda self: None
Graphstst_swigregister = _GraphLib_c.Graphstst_swigregister
Graphstst_swigregister(Graphstst)

class Graphis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Graphis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Graphis, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _GraphLib_c.new_Graphis(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddEdge(self, sourceNodeINdex, destNodeIndex):
        return _GraphLib_c.Graphis_AddEdge(self, sourceNodeINdex, destNodeIndex)

    def AddNodeLabels(self, vectorOfNodeLabels):
        return _GraphLib_c.Graphis_AddNodeLabels(self, vectorOfNodeLabels)

    def AddEdgeWeight(self, pairOfNodes, weight):
        return _GraphLib_c.Graphis_AddEdgeWeight(self, pairOfNodes, weight)

    def GetNumberOfNodes(self):
        return _GraphLib_c.Graphis_GetNumberOfNodes(self)

    def GetAdjMatrix(self):
        return _GraphLib_c.Graphis_GetAdjMatrix(self)

    def GetNodeNeighbors(self, indexOfNode):
        return _GraphLib_c.Graphis_GetNodeNeighbors(self, indexOfNode)

    def GetNodeLabels(self):
        return _GraphLib_c.Graphis_GetNodeLabels(self)

    def GetEdgeWeight(self, indexOfNode1, indexOfNode2):
        return _GraphLib_c.Graphis_GetEdgeWeight(self, indexOfNode1, indexOfNode2)

    def GetVectorOfEdges(self):
        return _GraphLib_c.Graphis_GetVectorOfEdges(self)
    __swig_destroy__ = _GraphLib_c.delete_Graphis
    __del__ = lambda self: None
Graphis_swigregister = _GraphLib_c.Graphis_swigregister
Graphis_swigregister(Graphis)


def GetNodeLabelsFromIndex(nodeIndices, allNodeLabels):
    return _GraphLib_c.GetNodeLabelsFromIndex(nodeIndices, allNodeLabels)
GetNodeLabelsFromIndex = _GraphLib_c.GetNodeLabelsFromIndex

def CountLabelsInGraph(graphs, uniqueNodeLabels, indBegin, indEnd, countLabels):
    return _GraphLib_c.CountLabelsInGraph(graphs, uniqueNodeLabels, indBegin, indEnd, countLabels)
CountLabelsInGraph = _GraphLib_c.CountLabelsInGraph

def ComputeInnerProduct(countLabels, numberOfRowsBegin, numberOfRowsEnd, kernelMatrix):
    return _GraphLib_c.ComputeInnerProduct(countLabels, numberOfRowsBegin, numberOfRowsEnd, kernelMatrix)
ComputeInnerProduct = _GraphLib_c.ComputeInnerProduct

def WLSubtreeKernelii(vectorOfGraph, numberOfIteration):
    return _GraphLib_c.WLSubtreeKernelii(vectorOfGraph, numberOfIteration)
WLSubtreeKernelii = _GraphLib_c.WLSubtreeKernelii
# This file is compatible with both classic and new-style classes.


